pipeline {
    agent any

    environment {
        JENKINS_HEARTBEAT = "-Dorg.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL=86400"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git (
                    url: 'https://github.com/vaibhav20014/cicd-pipeline.git',
                    branch: 'main',
                    credentialsId: 'da5c97ea-6aae-4918-9418-7104dc229832'
                )
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def sonarqubeScannerHome = tool name: 'Sonar'
                    
                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.115:9000 \
                            -Dsonar.login=${sonarLogin} \
                            ${env.JENKINS_HEARTBEAT}
                        """
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Build the NGINX image
                    sh 'docker build -t nginx-server .'

                    // Build the backend service image
                    sh 'docker build -t backend-service ./backend-service'
                }
            }
        }

        stage('Run Docker Containers') {
            steps {
                script {
                    def nginxContainers = ['nginx-container1', 'nginx-container2']
                    def nginxPorts = ['8000:80', '8001:80']

                    // Run NGINX containers
                    for (int i = 0; i < nginxContainers.size(); i++) {
                        sh "docker stop ${nginxContainers[i]} || true"
                        sh "docker rm ${nginxContainers[i]} || true"
                        sh "docker run -d --name ${nginxContainers[i]} -p ${nginxPorts[i]} nginx-server"
                    }

                    // Run the backend service container
                    sh "docker stop backend-service || true"
                    sh "docker rm backend-service || true"
                    sh "docker run -d --name backend-service --link mysql-container:mysql -p 3000:3000 backend-service"
                }
            }
        }

        stage('Copy Files to Running NGINX Containers') {
            steps {
                script {
                    def nginxContainers = ['nginx-container1', 'nginx-container2']

                    for (container in nginxContainers) {
                        def container_id = sh(script: "docker ps --filter 'name=${container}' --format '{{.ID}}'", returnStdout: true).trim()
                        if (container_id) {
                            sh "docker cp . ${container_id}:/usr/share/nginx/html"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
