pipeline {
    agent any

    environment {
        DOCKERHUB_USERNAME = 'israni141'
        DOCKERHUB_TOKEN = 'dckr_pat_IpyOZ8wV2Ycx6C7P2fDBWqcIlEI'
        DOCKERHUB_REPO = 'israni141/devops'
        GIT_CREDENTIALS_ID = 'da5c97ea-6aae-4918-9418-7104dc229832'
        GIT_REPO = 'https://github.com/vaibhav20014/cicd-pipeline.git'
    }

    stages {
        stage('SonarQube Analysis') {
            steps {
                script {
                    echo "Performing SonarQube analysis..."
                    def sonarqubeScannerHome = tool name: 'Sonar' // Ensure the SonarQube scanner is installed in Jenkins
                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.115:9000 \
                            -Dsonar.login=${sonarLogin}
                        """
                    }
                }
            }
        }

        stage('Delete Old Docker Hub Images') {
            steps {
                script {
                    echo "Deleting old Docker Hub images..."
                    try {
                        sh """
                            curl -s -X DELETE \
                            -u $DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN \
                            https://hub.docker.com/v2/repositories/$DOCKERHUB_REPO/manifests/sha256:b8dbb402ed47edfd74a100fc5318362fd2a7bfa3fecc3ffe54bac14a682b7c74
                        """
                        echo "Old image deleted: nginx1-latest"
                    } catch (Exception e) {
                        echo "Failed to delete old image: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    echo "Building and pushing Docker images..."
                    // Build and push NGINX Docker image
                    sh """
                        docker build -t $DOCKERHUB_REPO:nginx1-latest -f Dockerfile .
                        echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
                        docker push $DOCKERHUB_REPO:nginx1-latest
                    """
                    // Build and push API Docker image
                    sh """
                        docker build -t $DOCKERHUB_REPO:my-api-latest -f Dockerfile.node .
                        echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
                        docker push $DOCKERHUB_REPO:my-api-latest
                    """
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "Running functional tests..."
                    sh """
                        npm install @playwright/test
                        npx playwright install
                        npx playwright test 
                    """
                }
            }
        }

        stage('Delete NGINX API Pod') {
            steps {
                script {
                    echo "Deleting NGINX API pod..."
                    sh """
                        kubectl --kubeconfig kube.conf delete pod nginx-api-pod || echo "Pod not found, skipping deletion."
                    """
                }
            }
        }

        stage('Push Main to Prod Branch') {
            steps {
                script {
                    echo "Syncing main branch to prod branch, excluding JenkinsFile..."
                    withCredentials([usernamePassword(credentialsId:'da5c97ea-6aae-4918-9418-7104dc229832', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                            cd ${env.WORKSPACE}
                            git config user.name "$GIT_USERNAME"
                            git config user.email "kalevaibhav740@gmail.com"

                            # Checkout or create the prod branch
                            git checkout prod || git checkout -b prod
                            git pull https://$GIT_USERNAME:$GIT_PASSWORD@github.com/vaibhav20014/cicd-pipeline.git prod || echo "Prod branch is up to date"

                            # Fetch changes from main
                            git fetch origin main

                            # Merge main into prod but exclude JenkinsFile
                            git checkout origin/main -- . ':!JenkinsFile'
                            git commit -m "Syncing main branch changes to prod branch, excluding JenkinsFile" || echo "No changes to commit"

                            # Push the updated prod branch
                            git push https://$GIT_USERNAME:$GIT_PASSWORD@github.com/vaibhav20014/cicd-pipeline.git prod --no-verify
                        """
                    }
                }
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
