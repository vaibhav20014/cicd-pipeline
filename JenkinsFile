pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git (
                    url: 'https://github.com/vaibhav20014/cicd-pipeline.git',
                    branch: 'main',
                    credentialsId: 'da5c97ea-6aae-4918-9418-7104dc229832'
                )
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Define the SonarQube Scanner tool
                    def sonarqubeScannerHome = tool name: 'Sonar' // Ensure 'Sonar' matches the tool name in Jenkins
                    
                    // Use Jenkins credentials to securely access SonarQube
                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.115:9000 \
                            -Dsonar.login=${sonarLogin}
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t backend-service .'
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    def containerName = 'backend-container'
                    def portMapping = '3000:3000'
                    
                    // Stop and remove the old container if it exists
                    sh "docker stop ${containerName} || true"
                    sh "docker rm ${containerName} || true"
                    
                    // Run the new backend container
                    sh "docker run -d --name ${containerName} -p ${portMapping} backend-service"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
