pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git (
                    url: 'https://github.com/vaibhav20014/cicd-pipeline.git',
                    branch: 'main',
                    credentialsId: 'da5c97ea-6aae-4918-9418-7104dc229832'
                )
            }
        } 

        stage('SonarQube Analysis') {
            steps {
                script {
                    def sonarqubeScannerHome = tool name: 'Sonar'
                    
                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.115:9000 \
                            -Dsonar.login=${sonarLogin}
                        """
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo 'No tests defined for this project.'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def nginxImageExists = sh(script: "docker images -q nginx-server", returnStdout: true).trim()
                    if (!nginxImageExists) {
                        echo "Building NGINX server image..."
                        sh 'DOCKER_BUILDKIT=1 docker build -t nginx-server .'
                    } else {
                        echo "NGINX server image already exists. Skipping build."
                    }

                    def apiImageExists = sh(script: "docker images -q api-service", returnStdout: true).trim()
                    if (fileExists('Dockerfile.node')) {
                        if (!apiImageExists) {
                            echo "Building API service image..."
                            sh 'DOCKER_BUILDKIT=1 docker build -t api-service -f Dockerfile.node .'
                        } else {
                            echo "API service image already exists. Skipping build."
                        }
                    } else {
                        error('Dockerfile.node not found, cannot build API service image.')
                    }
                }
            }
        }

        stage('Start Docker Compose') {
            steps {
                script {
                    // Use Docker Compose to start the services and network defined in docker-compose.yml
                    echo 'Starting Docker Compose services...'
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Copy Files to Running NGINX Containers') {
            steps {
                script {
                    sh '''
                        docker cp ./Signup.html nginx1:/usr/share/nginx/html/index.html
                        docker cp ./Signup.html nginx2:/usr/share/nginx/html/index.html
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
