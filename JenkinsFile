pipeline {
    agent any

    environment {
        DOCKERHUB_USERNAME = 'israni141'
        DOCKERHUB_PASSWORD = 'dckr_pat_IpyOZ8wV2Ycx6C7P2fDBWqcIlEI'
        DOCKERHUB_REPO = 'israni141/devops'
    }

    stages {
        stage('Install Docker Compose') {
            steps { 
                script { 
                    // Check if docker-compose is installed
                    def dockerComposeInstalled = sh(script: 'which docker-compose', returnStdout: true).trim()
                    if (!dockerComposeInstalled) {
                        echo 'Docker Compose is not installed. Installing...'
                        // Install Docker Compose
                        sh '''
                            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                            sudo chmod +x /usr/local/bin/docker-compose
                        '''
                    } else {  
                        echo 'Docker Compose is already installed.'
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                git (
                    url: 'https://github.com/vaibhav20014/cicd-pipeline.git',
                    branch: 'main',
                    credentialsId: 'da5c97ea-6aae-4918-9418-7104dc229832'
                )
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def sonarqubeScannerHome = tool name: 'Sonar'

                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.115:9000 \
                            -Dsonar.login=${sonarLogin}
                        """
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo 'No tests defined for this project.'
                }
            }
        }

        stage('Clean Up Existing Containers') {
            steps {
                script {
                    // Clean up any existing containers with conflicting names
                    sh '''
                        docker ps -a --filter "name=nginx1" --format "{{.ID}}" | xargs -r docker rm -f
                        docker ps -a --filter "name=nginx2" --format "{{.ID}}" | xargs -r docker rm -f
                        docker ps -a --filter "name=api-container" --format "{{.ID}}" | xargs -r docker rm -f
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
    steps {
        script {
            echo "Cleaning up existing Kubernetes pods..."
            sh '''
                kubectl --kubeconfig kube.conf delete pod nginx-api-pod --ignore-not-found=true
            '''
            
            echo "Deploying to Kubernetes using YAML files..."
            sh '''
                kubectl --kubeconfig kube.conf apply -f nginxbuld.yaml
            '''
        }
    }
}


        stage('Clean Up Docker Hub Images') {
            steps {
                script {
                    echo "Cleaning up Docker Hub images..."
                    sh '''
                        curl -s -X DELETE \
                        -u ${DOCKERHUB_USERNAME}:${DOCKERHUB_PASSWORD} \
                        https://hub.docker.com/v2/repositories/${DOCKERHUB_REPO}/tags/nginx1-latest/

                        curl -s -X DELETE \
                        -u ${DOCKERHUB_USERNAME}:${DOCKERHUB_PASSWORD} \
                        https://hub.docker.com/v2/repositories/${DOCKERHUB_REPO}/tags/my-api-latest/
                    '''
                }
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
