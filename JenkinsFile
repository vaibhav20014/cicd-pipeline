pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git (
                    url: 'https://github.com/vaibhav20014/cicd-pipeline.git',
                    branch: 'main',
                    credentialsId: 'da5c97ea-6aae-4918-9418-7104dc229832'
                )
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def sonarqubeScannerHome = tool name: 'Sonar'
                    
                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.115:9000 \
                            -Dsonar.login=${sonarLogin}
                        """
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo 'No tests defined for this project.'
                }
            }
        }

        stage('Create Docker Network') {
            steps {
                script {
                    def networkName = 'my_app_network'
                    // Check if network exists, if not, create it
                    def networkExists = sh(script: "docker network ls | grep ${networkName}", returnStatus: true)
                    if (networkExists != 0) {
                        echo "Network ${networkName} does not exist. Creating it..."
                        sh "docker network create ${networkName}"
                    } else {
                        echo "Network ${networkName} already exists."
                    }
                }
            }
        }

stage('Start MySQL Container') {
    steps {
        script {
            // Check if the container already exists
            def containerExists = sh(script: "docker ps -a -q --filter name=sql_server_container", returnStdout: true).trim()
            if (containerExists) {
                echo "Container sql_server_container already exists."
                
                // Check if the container is running
                def containerRunning = sh(script: "docker ps -q --filter name=sql_server_container", returnStdout: true).trim()
                if (containerRunning) {
                    echo "Container sql_server_container is already running."
                } else {
                    echo "Container sql_server_container exists but is not running. Starting it..."
                    sh "docker start sql_server_container"
                }
            } else {
                echo "Creating and starting a new MySQL container..."
                
                // Ensure the Docker network exists
                def networkExists = sh(script: "docker network ls --filter name=mynetwork -q", returnStdout: true).trim()
                if (!networkExists) {
                    echo "Creating Docker network 'mynetwork'..."
                    sh "docker network create mynetwork"
                }

                // Run the new container
                sh """
                    docker run -d --name sql_server_container \
                    --network mynetwork \
                    -e MYSQL_ROOT_PASSWORD=Admin@123 \
                    -e MYSQL_DATABASE=Testdb \
                    mysql:latest
                """
            }
        }
    }
}
        stage('Build Docker Images') {
            steps {
                script {
                    // Build the NGINX server image
                    sh 'docker build -t nginx-server .'
                    
                    // Build the API container image using Dockerfile.node
                    if (fileExists('Dockerfile.node')) {
                        sh 'docker build -t api-service -f Dockerfile.node .'
                    } else {
                        error('Dockerfile.node not found, cannot build API service image.')
                    }
                }
            }
        }

        stage('Run Docker Containers') {
            steps {
                script {
                    // Run NGINX containers
                    sh """
                    docker ps -a -q --filter "name=nginx1" | grep -q . && docker rm -f nginx1
                    docker run -d --name nginx1 --network mynetwork -p 8000:8000 nginx-server"""
                    sh """
                    docker ps -a -q --filter "name=nginx2" | grep -q . && docker rm -f nginx2
                    docker run -d --name nginx2 --network mynetwork -p 8001:8000 nginx-server"""

                    // Run API container and connect it to the network
                    sh 'docker ps -a -q --filter "name=api-container" | grep -q . && docker rm -f api-container'
                    sh 'docker run -d --name api-container --network mynetwork -p 8081:8080 api-service'
                }
            }
        }

        stage('Copy Files to Running NGINX Containers') {
            steps {
                script {
                    sh '''
                    docker cp ./Signup.html nginx1:/usr/share/nginx/html/index.html
                    docker cp ./Signup.html nginx2:/usr/share/nginx/html/index.html
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
