pipeline {
    agent any

    environment {
        DOCKERHUB_USERNAME = 'israni141'
        DOCKERHUB_TOKEN = 'dckr_pat_IpyOZ8wV2Ycx6C7P2fDBWqcIlEI' // Use token for secure authentication
        DOCKERHUB_REPO = 'israni141/devops'
        GIT_CREDENTIALS_ID = 'da5c97ea-6aae-4918-9418-7104dc229832' // Jenkins credential ID
        GIT_REPO = 'https://github.com/vaibhav20014/cicd-pipeline.git' // Replace with your repo URL
    }
  
    stages {
        stage('Delete Old Docker Hub Images') { 
            steps {
                script {
                    echo "Deleting old Docker Hub images..."
                    try {
                        sh """
                            curl -s -X DELETE \
                            -u $DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN \
                            https://hub.docker.com/v2/repositories/$DOCKERHUB_REPO/manifests/sha256:b8dbb402ed47edfd74a100fc5318362fd2a7bfa3fecc3ffe54bac14a682b7c74
                        """
                        echo "Old image deleted: nginx1-latest"
                    } catch (Exception e) {
                        echo "Failed to delete old image: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Build and Push NGINX Docker Image') {
            steps {
                script {
                    echo "Building and pushing a new NGINX Docker image..."
                    sh """
                        docker build -t $DOCKERHUB_REPO:nginx1-latest -f Dockerfile .
                        echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
                        docker push $DOCKERHUB_REPO:nginx1-latest
                    """
                }
            }
        }

        stage('Build and Push API Docker Image') {
            steps {
                script {
                    echo "Building and pushing a new API Docker image..."
                    sh """
                        docker build -t $DOCKERHUB_REPO:my-api-latest -f Dockerfile.node .
                        echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
                        docker push $DOCKERHUB_REPO:my-api-latest
                    """
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "Running functional tests on the deployed containers..."
                    try {
                        sh """
                            npx install @playwright/test -D
                            npx playwright test
                        """
                        echo "Tests passed successfully!"
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        echo "Tests failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error "Functional tests failed. Stopping pipeline."
                    }
                }
            }
        }

        stage('Delete Kubernetes Pod') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Deleting old Kubernetes pod..."
                    sh """
                        kubectl --kubeconfig kube.conf delete pod nginx-api-pod --ignore-not-found=true
                    """
                }
            }
        }
stage('Push Main to Prod Branch') {
    when {
        expression { currentBuild.result == 'SUCCESS' }
    }
    steps {
        script {
            echo "Pushing changes from main branch to prod branch..."
            withCredentials([usernamePassword(credentialsId: 'da5c97ea-6aae-4918-9418-7104dc229832', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                sh """
                    # Navigate to the workspace where the repo is already cloned
                    cd ${env.WORKSPACE}

                    # Configure Git identity (if not already set)
                    git config user.name "$GIT_USERNAME"
                    git config user.email "kalevaibhav740@gmail.com"

                    # Ensure we're on the main branch and pull the latest changes
                    git checkout main
                    git pull https://$GIT_USERNAME:$GIT_PASSWORD@github.com/vaibhav20014/cicd-pipeline.git main

                    # Switch to the prod branch and pull the latest changes
                    git checkout prod
                    git pull https://$GIT_USERNAME:$GIT_PASSWORD@github.com/vaibhav20014/cicd-pipeline.git prod

                    # Sync files from the main branch to prod (excluding Jenkinsfile and functional tests)
                    rsync -av --exclude=Jenkinsfile --exclude=tests/functional_test.spec.js ${env.WORKSPACE}/ ./

                    # Stage, commit, and push the changes to the prod branch
                    git add .
                    git commit -m "Syncing main branch changes to prod branch"
                    git push https://$GIT_USERNAME:$GIT_PASSWORD@github.com/vaibhav20014/cicd-pipeline.git prod
                """

            }
        }
    }
}


        stage('Deploy to Kubernetes') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Applying Kubernetes deployment..."
                    sh """
                        kubectl --kubeconfig kube.conf apply -f nginxbuld.yaml
                    """
                }
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
