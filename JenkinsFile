pipeline {
    agent any
    
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/vaibhav20014/cicd-pipeline.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    // Define the SonarQube Scanner tool
                    def sonarqubeScannerHome = tool name: 'Sonar' // Ensure 'Sonar' matches the tool name in Jenkins
                    
                    // Use Jenkins credentials to securely access SonarQube
                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.115:9000 \
                            -Dsonar.login=${sonarLogin}
                        """
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    if (fileExists('./backend-service/package.json')) {
                        sh '''
                        cd ./backend-service
                        npm install
                        npm test
                        '''
                    } else {
                        echo 'No backend tests to run.'
                    }
                }
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    sh 'docker build -t nginx-server .'
                    if (fileExists('./backend-service/Dockerfile.node')) {
                        sh 'docker build -t backend-service ./backend-service'
                    } else {
                        echo 'Backend service directory not found, skipping build.'
                    }
                }
            }
        }
        stage('Run Docker Containers') {
            when {
                not { expression { env.BUILD_FAILURE != null } }
            }
            steps {
                script {
                    sh 'docker run -d --name nginx1 -p 8001:8000 nginx-server'
                    sh 'docker run -d --name nginx2 -p 8002:8000 nginx-server'
                }
            }
        }
        stage('Copy Files to Running NGINX Containers') {
            when {
                not { expression { env.BUILD_FAILURE != null } }
            }
            steps {
                script {
                    sh '''
                    docker cp ./Signup.html nginx1:/usr/share/nginx/html/index.html
                    docker cp ./Signup.html nginx2:/usr/share/nginx/html/index.html
                    '''
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
