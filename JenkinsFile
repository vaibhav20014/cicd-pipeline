pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'Sonar' // Your SonarQube server name from Jenkins configuration
        PROJECT_KEY = 'your-unique-project-key'  // Replace this with a unique key for your project
    }

    stages {
        stage('Clone Repository') {
            steps {
                git (
                    url: 'https://github.com/vaibhav20014/cicd-pipeline.git',
                    branch: 'main',
                    credentialsId: '951f08f7-7683-42c7-b306-907e00f64375'
                )
            }
        }

        stage('SonarQube Scan') {
            steps {
                script {
                    def scannerHome = tool 'Sonar' // Use the scanner tool you set up
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=${PROJECT_KEY} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://13.235.14.58:9000 \
                            -Dsonar.login=Sonar
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t nginx-server .'
            }
        }

        stage('Run Docker Container') {
            steps {
                sh 'docker stop nginx-container || true'
                sh 'docker rm nginx-container || true'
                sh 'docker run -d --name nginx-container -p 8000:80 nginx-server'
            }
        }

        stage('Copy Files to Running Container') {
            steps {
                script {
                    def container_id = sh(script: 'docker ps --filter "status=running" --format "{{.ID}}"', returnStdout: true).trim()
                    if (container_id) {
                        sh "docker cp . ${container_id}:/usr/share/nginx/html"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
