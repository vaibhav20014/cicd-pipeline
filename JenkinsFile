pipeline {
    agent any

    

    stages {
        stage('Clone Repository') {
            steps {
                git (
                    url: 'https://github.com/vaibhav20014/cicd-pipeline.git',
                    branch: 'main',
                    credentialsId: 'da5c97ea-6aae-4918-9418-7104dc229832'
                )
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Define the SonarQube Scanner tool
                    def sonarqubeScannerHome = tool name: 'Sonar' // Ensure 'SonarScanner' matches the tool name in Jenkins
                    
                    // Use Jenkins credentials to securely access SonarQube
                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.37:9000 \
                            -Dsonar.login=${sonarLogin}
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t nginx-server .'
            }
        }

stage('Run Docker Container') {
    steps {
        script {
            def containers = ['nginx-container1', 'nginx-container2']
            def ports = ['8000:80', '8001:80']
            
            for (int i = 0; i < containers.size(); i++) {
                sh "docker stop ${containers[i]} || true"
                sh "docker rm ${containers[i]} || true"
                sh "docker run -d --name ${containers[i]} -p ${ports[i]} nginx-server"
            }
        }
    }
}

stage('Copy Files to Running Container') {
    steps {
        script {
            def containers = ['nginx-container1', 'nginx-container2']
            
            for (container in containers) {
                def container_id = sh(script: "docker ps --filter 'name=${container}' --format '{{.ID}}'", returnStdout: true).trim()
                if (container_id) {
                    sh "docker cp . ${container_id}:/usr/share/nginx/html"
                }
            }
        }
    }
}

    post {
        always {
            cleanWs()
        }
    }
}
