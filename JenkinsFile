pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git (
                    url: 'https://github.com/vaibhav20014/cicd-pipeline.git',
                    branch: 'main',
                    credentialsId: 'da5c97ea-6aae-4918-9418-7104dc229832'
                )
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def sonarqubeScannerHome = tool name: 'Sonar'
                    
                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.115:9000 \
                            -Dsonar.login=${sonarLogin}
                        """
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo 'No tests defined for this project.'
                }
            }
        }

        stage('Create Docker Network') {
            steps {
                script {
                    def networkName = 'my_app_network'
                    sh """
                        docker network ls --filter name=${networkName} | grep -q ${networkName} || \
                        docker network create ${networkName}
                    """
                }
            }
        }

        stage('Start MySQL Container') {
            steps {
                script {
                    def containerName = 'sql_server_container'
                    def networkName = 'my_app_network'

                    def isRunning = sh(script: "docker ps --filter name=${containerName} --format '{{.Names}}'", returnStdout: true).trim()
                    if (isRunning) {
                        echo "Container ${containerName} is already running."
                    } else {
                        def isStopped = sh(script: "docker ps -a --filter name=${containerName} --format '{{.Names}}'", returnStdout: true).trim()
                        if (isStopped) {
                            echo "Container ${containerName} exists but is not running. Starting it..."
                            sh "docker start ${containerName}"
                        } else {
                            echo "Creating and starting a new MySQL container..."
                            sh """
                                docker run -d --name ${containerName} \
                                --network ${networkName} \
                                -e MYSQL_ROOT_PASSWORD=Admin@123 \
                                -e MYSQL_DATABASE=Testdb \
                                mysql:latest
                            """
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def nginxImageExists = sh(script: "docker images -q nginx-server", returnStdout: true).trim()
                    if (!nginxImageExists) {
                        echo "Building NGINX server image..."
                        sh 'DOCKER_BUILDKIT=1 docker build -t nginx-server .'
                    } else {
                        echo "NGINX server image already exists. Skipping build."
                    }

                    def apiImageExists = sh(script: "docker images -q api-service", returnStdout: true).trim()
                    if (fileExists('Dockerfile.node')) {
                        if (!apiImageExists) {
                            echo "Building API service image..."
                            sh 'DOCKER_BUILDKIT=1 docker build -t api-service -f Dockerfile.node .'
                        } else {
                            echo "API service image already exists. Skipping build."
                        }
                    } else {
                        error('Dockerfile.node not found, cannot build API service image.')
                    }
                }
            }
        }

        stage('Run Docker Containers') {
    steps {
        script {
            def networkName = 'my_app_network'

            // Check and handle the NGINX1 container
            def nginx1Exists = sh(script: "docker ps -a -q --filter name=nginx1", returnStdout: true).trim()
            if (nginx1Exists) {
                def nginx1Running = sh(script: "docker ps -q --filter name=nginx1", returnStdout: true).trim()
                if (nginx1Running) {
                    echo "NGINX1 container is already running."
                } else {
                    echo "NGINX1 container exists but is not running. Removing and recreating it..."
                    sh "docker rm -f nginx1"
                    sh "docker run -d --name nginx1 --network ${networkName} -p 8000:8000 nginx-server"
                }
            } else {
                echo "NGINX1 container does not exist. Creating it..."
                sh "docker run -d --name nginx1 --network ${networkName} -p 8000:8000 nginx-server"
            }

            // Check and handle the NGINX2 container
            def nginx2Exists = sh(script: "docker ps -a -q --filter name=nginx2", returnStdout: true).trim()
            if (nginx2Exists) {
                def nginx2Running = sh(script: "docker ps -q --filter name=nginx2", returnStdout: true).trim()
                if (nginx2Running) {
                    echo "NGINX2 container is already running."
                } else {
                    echo "NGINX2 container exists but is not running. Removing and recreating it..."
                    sh "docker rm -f nginx2"
                    sh "docker run -d --name nginx2 --network ${networkName} -p 8001:8000 nginx-server"
                }
            } else {
                echo "NGINX2 container does not exist. Creating it..."
                sh "docker run -d --name nginx2 --network ${networkName} -p 8001:8000 nginx-server"
            }

            // Check and handle the API container
            def apiContainerExists = sh(script: "docker ps -a -q --filter name=api-container", returnStdout: true).trim()
            if (apiContainerExists) {
                def apiContainerRunning = sh(script: "docker ps -q --filter name=api-container", returnStdout: true).trim()
                if (apiContainerRunning) {
                    echo "API container is already running."
                } else {
                    echo "API container exists but is not running. Removing and recreating it..."
                    sh "docker rm -f api-container"
                    sh "docker run -d --name api-container --network ${networkName} -p 8081:8080 api-service"
                }
            } else {
                echo "API container does not exist. Creating it..."
                sh "docker run -d --name api-container --network ${networkName} -p 8081:8080 api-service"
            }
        }
    }
}


        stage('Copy Files to Running NGINX Containers') {
            steps {
                script {
                    sh '''
                        docker cp ./Signup.html nginx1:/usr/share/nginx/html/index.html
                        docker cp ./Signup.html nginx2:/usr/share/nginx/html/index.html
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
