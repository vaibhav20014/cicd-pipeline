pipeline {
    agent any

    environment {
        DOCKERHUB_USERNAME = 'israni141'
        DOCKERHUB_TOKEN = 'dckr_pat_IpyOZ8wV2Ycx6C7P2fDBWqcIlEI' // Use token for secure authentication
        DOCKERHUB_REPO = 'israni141/devops'
    }
 
    stages {
        stage('Delete Old Docker Hub Images') { 
            steps {
                script {
                    echo "Deleting old Docker Hub images..."
                    try {
                        sh '''
                            curl -s -X DELETE \
                            -u ${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN} \
                            https://hub.docker.com/v2/repositories/${DOCKERHUB_REPO}/manifests/sha256:b8dbb402ed47edfd74a100fc5318362fd2a7bfa3fecc3ffe54bac14a682b7c74
                        ''' 
                        echo "Old image deleted: nginx1-latest"
                    } catch (Exception e) {
                        echo "Failed to delete old image: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Build and Push NGINX Docker Image') {
            steps {
                script {
                    echo "Building and pushing a new NGINX Docker image..."
                    sh '''
                        docker build -t ${DOCKERHUB_REPO}:nginx1-latest -f Dockerfile .
                        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_TOKEN}
                        docker push ${DOCKERHUB_REPO}:nginx1-latest
                    '''
                }
            }
        }

        stage('Build and Push API Docker Image') {
            steps {
                script {
                    echo "Building and pushing a new API Docker image..."
                    sh '''
                        docker build -t ${DOCKERHUB_REPO}:my-api-latest -f Dockerfile.node .
                        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_TOKEN}
                        docker push ${DOCKERHUB_REPO}:my-api-latest
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "Running functional tests on the deployed containers..."
                    try {
                        // Install Playwright dependencies and run tests
                        sh '''
                            npx playwright install --with-deps
                            npx playwright test
                        '''
        
                        echo "Tests passed successfully!"
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        echo "Tests failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Delete Kubernetes Pod') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Deleting old Kubernetes pod..."
                    sh '''
                        kubectl --kubeconfig kube.conf delete pod nginx-api-pod --ignore-not-found=true
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "Applying Kubernetes deployment..."
                    sh '''
                        kubectl --kubeconfig kube.conf apply -f nginxbuld.yaml
                    '''
                }
            }
        }

        stage('Optional Cleanup of Docker Hub Images') {
            steps {
                script {
                    echo "Performing optional cleanup of Docker Hub images..."
                    try {
                        sh '''
                            curl -s -X DELETE \
                            -u ${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN} \
                            https://hub.docker.com/v2/repositories/${DOCKERHUB_REPO}/manifests/sha256:<digest_for_my-api-latest>
                        '''
                        echo "Optional cleanup completed."
                    } catch (Exception e) {
                        echo "Optional cleanup failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
