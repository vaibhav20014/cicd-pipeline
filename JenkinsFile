pipeline {
    agent any

    stages {
        stage('Install Docker Compose') {
            steps { 
                script {
                    // Check if docker-compose is installed
                    def dockerComposeInstalled = sh(script: 'which docker-compose', returnStdout: true).trim()
                    if (!dockerComposeInstalled) {
                        echo 'Docker Compose is not installed. Installing...'
                        // Install Docker Compose
                        sh '''
                            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                            sudo chmod +x /usr/local/bin/docker-compose
                        '''
                    } else {  
                        echo 'Docker Compose is already installed.'
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                git (
                    url: 'https://github.com/vaibhav20014/cicd-pipeline.git',
                    branch: 'main',
                    credentialsId: 'da5c97ea-6aae-4918-9418-7104dc229832'
                )
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def sonarqubeScannerHome = tool name: 'Sonar'

                    withCredentials([string(credentialsId: 'Sonar', variable: 'sonarLogin')]) {
                        sh """
                            ${sonarqubeScannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=cicd-pipeline \
                            -Dsonar.host.url=http://103.251.252.115:9000 \
                            -Dsonar.login=${sonarLogin}
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t israni141/devops:my-api-latest .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([string(credentialsId: 'DockerHub', variable: 'dockerHubPassword')]) {
                    sh """
                        echo ${dockerHubPassword} | docker login -u israni141 --password-stdin
                        docker push israni141/devops:my-api-latest
                    """
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo 'Running functional tests on the deployed containers...'
                    sh '''
                        npm install @playwright/test -D
                        npx playwright install --with-deps
                        npx playwright test
                    '''
                    echo 'Tests passed successfully!'
                }
            }
        }

        stage('Delete Kubernetes Pod') {
            steps {
                script {
                    echo 'Deleting old Kubernetes pod...'
                    sh 'kubectl --kubeconfig kube.conf delete pod nginx-api-pod --ignore-not-found=true'
                }
            }
        }

        stage('Push Main to Prod Branch') {
            steps {
                script {
                    echo 'Pushing changes from main branch to prod branch...'
                    withCredentials([usernamePassword(credentialsId: 'GIT_CREDENTIALS_ID', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                            git checkout main
                            git pull origin main
                            git checkout prod
                            git merge main
                            git push origin prod
                        '''
                    }
                }
            }
        }
    }
}
